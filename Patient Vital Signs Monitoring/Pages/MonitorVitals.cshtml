@page "/patients/{id}/vitals/monitor"
@model MonitorVitalsModel
@{
    ViewData["Title"] = "Monitor";
}



<!-- Critical Alert Modal -->
<div class="modal fade custom-critical-modal" id="criticalAlertModal" tabindex="-1" aria-labelledby="criticalAlertModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-danger">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="criticalAlertModalLabel">
                    <i class="bi bi-exclamation-triangle-fill"></i> Critical Vital Sign(s) Detected
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="criticalAlertModalBody">
                <!-- Details will be injected by JS -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" id="acknowledgeCriticalBtn" data-bs-dismiss="modal">
                    I Understand
                </button>
            </div>
        </div>
    </div>
</div>


<div class="card narrow-card mt-4 mx-auto shadow-sm rounded-top-4 overflow-hidden">
    <div class="card-header bg-gradient bg-primary text-white text-center">
        <div class="d-flex align-items-center justify-content-between">
            <h4 class="mb-0 text-center flex-grow-1">
                <i class="bi bi-graph-up-arrow me-2"></i>
                Live Monitoring Patient
                <span class="badge bg-light text-dark ms-2">ID: @Model.Id</span>
            </h4>
            <button class="btn btn-outline-light ms-2" id="historicalBtn" onclick="showHistoricalData()">
                <i class="bi bi-clock-history"></i> Last 24h
            </button>
            <button class="btn btn-outline-warning ms-2" id="closeHistoricalBtn" style="display:none;" onclick="restoreLiveChart()">
                <i class="bi bi-x-circle"></i> Close 24h
            </button>
            <button type="button"
                    class="btn btn-outline-light ms-2"
                    id="patientInfoBtn"
                    data-bs-toggle="popover"
                    data-bs-html="true"
                    data-bs-placement="left"
                    title="Patient Info"
                    data-bs-content="
                        <strong>Name:</strong> @Model.Patient?.Name <br/>
                        <strong>Age:</strong> @Model.Patient?.Age <br/>
                        <strong>Room No:</strong> @Model.Patient?.RoomNumber <br/>
                        <strong>ID:</strong> @Model.Patient?.PatientId
                    ">
                <i class="bi bi-person-badge"></i>
            </button>
            <button class="btn btn-outline-light ms-2" onclick="downloadChart()">
                <i class="bi bi-download"></i>
            </button>
        </div>
    </div>
    <div class="card-body">
        <div class="mb-4" style="height: calc(60vh); max-width: 100%;">
            <canvas id="vitalsChart" style="width:100%; height:100%;"></canvas>
        </div>
        <div class="alert alert-info text-center mt-3">
            <i class="bi bi-info-circle me-2"></i>
            The chart above displays the patient's vital signs over time. Use the navigation menu to view details or run simulations.
        </div>
    </div>
</div>




@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>

    <script>
        // Serialize the vital signs data from the model
        const vitalSigns = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.signs));

        // Get only the 5 latest signs
        const latestSigns = vitalSigns.slice(-5);

        // Extract labels and datasets using model properties
        const labels = latestSigns.map(v => {
            const ts = v.timestamp || v.Timestamp;
            if (!ts) return "";
            const date = new Date(ts);
            return date.toLocaleString([], {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            });
        });
        const heartRates = latestSigns.map(v => v.HeartRate);
        const oxygenSaturations = latestSigns.map(v => v.OxygenSaturation);
        //const systolicBP = latestSigns.map(v => parseInt(v.bloodPressure.split('/')[0]));
        //const diastolicBP = latestSigns.map(v => parseInt(v.bloodPressure.split('/')[1]));
        const systolicBP = latestSigns.map(v => safeSplitBP(v.BloodPressure)[0]);
        const diastolicBP = latestSigns.map(v => safeSplitBP(v.BloodPressure)[1]);

        // Chart.js configuration
        const ctx = document.getElementById('vitalsChart').getContext('2d');
        const vitalsChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Heart Rate',
                        data: heartRates,
                        borderColor: 'rgb(255, 99, 132)',
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        fill: false,
                        tension: 0.1
                    },
                    {
                        label: 'Oxygen Saturation',
                        data: oxygenSaturations,
                        borderColor: 'rgb(54, 162, 235)',
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        fill: false,
                        tension: 0.1
                    },
                    {
                        label: 'Systolic BP',
                        data: systolicBP,
                        borderColor: 'rgb(255, 206, 86)',
                        backgroundColor: 'rgba(255, 206, 86, 0.2)',
                        fill: false,
                        tension: 0.1
                    },
                    {
                        label: 'Diastolic BP',
                        data: diastolicBP,
                        borderColor: 'rgb(75, 192, 192)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        fill: false,
                        tension: 0.1
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: 'Current Patient Vital Signs' }
                },
                tooltip: {
                        usePointStyle: true,
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        document.addEventListener('DOMContentLoaded', function () {
            var popoverTrigger = document.getElementById('patientInfoBtn');
            if (popoverTrigger) {
                new bootstrap.Popover(popoverTrigger);
            }
        });

        const patientId = '@Model.Id';

        function downloadChart() {
            var link = document.createElement('a');
            link.href = vitalsChart.toBase64Image();
            link.download = `vitals_chart_${patientId}.png`;
            link.click();
        }


        function broadcastVitalSign() {
            fetch(`/patients/${patientId}/vitals/monitor?handler=BroadcastVitalSign`, {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                console.log("Vital sign broadcasted:", data);
            });
        }


        // Broadcast new vital signs at 10s intervals
        document.addEventListener('DOMContentLoaded', function () {
            setInterval(broadcastVitalSign, 10000);
        });

        let alertsEnabled = true;
        let liveUpdatesEnabled = true;

        // Signal R Connection Start
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/vitalsHub")
            .withAutomaticReconnect()
            .build();

        connection.on("ReceiveVitalSign", function (newSign) {
            if (!liveUpdatesEnabled) return; 

            const newDate = new Date(newSign.timestamp || newSign.Timestamp);
            vitalsChart.data.labels.push(newDate.toLocaleString([], { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' }));   
            vitalsChart.data.datasets[0].data.push(newSign.heartRate);
            vitalsChart.data.datasets[1].data.push(newSign.oxygenSaturation);
            const [systolic, diastolic] = newSign.bloodPressure.split('/').map(Number);
            vitalsChart.data.datasets[2].data.push(systolic);
            vitalsChart.data.datasets[3].data.push(diastolic);

            // Keep only the latest 4 entries
            if (vitalsChart.data.labels.length > 4) vitalsChart.data.labels = vitalsChart.data.labels.slice(-4);
                vitalsChart.data.datasets.forEach(ds => {
                    if (ds.data.length > 4) ds.data = ds.data.slice(-4);
            });

            vitalsChart.update();

            // Normalize property names for critical check
            if (alertsEnabled) {
                const normalizedSign = {
                    HeartRate: newSign.heartRate,
                    OxygenSaturation: newSign.oxygenSaturation,
                    BloodPressure: newSign.bloodPressure
            };
            checkBatchCritical([normalizedSign]);
        }
        });

        connection.onclose(() => console.log("SignalR connection closed"));
        connection.onreconnecting(() => console.log("SignalR reconnecting..."));
        connection.onreconnected(() => console.log("SignalR reconnected"));

        connection.start()
                    .then(() => console.log("SignalR connected"))
                    .catch(err => console.error("SignalR connection error:", err));


        
        function safeSplitBP(bp) {
            if (typeof bp !== 'string' || !bp.includes('/')) return [NaN, NaN];
            const parts = bp.split('/');
            if (parts.length !== 2) return [NaN, NaN];
            return parts.map(Number);
        }

         function getCriticalMessages(sign) {
             const messages = [];
             if (sign.HeartRate < 50 || sign.HeartRate > 120)
                 messages.push(`Heart Rate: ${sign.HeartRate}`);
             if (sign.OxygenSaturation < 92)
                 messages.push(`Oxygen Saturation: ${sign.OxygenSaturation}`);
             const [systolic, diastolic] = safeSplitBP(sign.BloodPressure);
             if (systolic < 90 || systolic > 180)
                 messages.push(`Systolic BP: ${systolic}`);
             if (diastolic < 60 || diastolic > 120)
                 messages.push(`Diastolic BP: ${diastolic}`);
             return messages;
         }


        function checkBatchCritical(signs) {
            let allMessages = [];
            signs.forEach(sign => {
                allMessages = allMessages.concat(getCriticalMessages(sign));
            });

            const modalBody = document.getElementById('criticalAlertModalBody');
            if (allMessages.length > 0) {
                modalBody.innerHTML = `
                    <ul class="mb-0">
                        ${allMessages.map(msg => `<li>${msg}</li>`).join('')}
                    </ul>
                `;
                if (criticalModal) {
                    criticalModal.show();
                    setTimeout(() => criticalModal.hide(), 5000);
                }
            } else {
                if (criticalModal) {
                    criticalModal.hide();
                }
            }
        }

        let criticalModal;
        document.addEventListener('DOMContentLoaded', function () {
            const modalElement = document.getElementById('criticalAlertModal');
            if (modalElement) {
                criticalModal = new bootstrap.Modal(modalElement, {
                    backdrop: 'static',
                    keyboard: false
                });
            }
        });

        document.addEventListener('DOMContentLoaded', function () {
            const acknowledgeBtn = document.getElementById('acknowledgeCriticalBtn');
            if (acknowledgeBtn) {
                acknowledgeBtn.addEventListener('click', function () {
                    // Add your custom logic here, e.g.:
                    console.log('Critical alert acknowledged');
                });
            }
        });

              
                async function showHistoricalData() {
            document.getElementById('historicalBtn').style.display = 'none';
            document.getElementById('closeHistoricalBtn').style.display = '';
            alertsEnabled = false;
            liveUpdatesEnabled = false;

            // Fetch all historical data (last 24h) from server
            const response = await fetch(`/patients/${patientId}/vitals/monitor?handler=Historical24h`);
            const historicalSigns = await response.json();

            // Clear chart
            vitalsChart.data.labels = [];
            vitalsChart.data.datasets.forEach(ds => ds.data = []);
            vitalsChart.update();

            // Apply earthquake meter (seismograph) style with grid lines enabled
            vitalsChart.options = {
                responsive: true,
                plugins: {
                    legend: { display: false },
                    title: { display: false }
                },
                interaction: { intersect: false },
                scales: {
                    x: {
                        type: 'linear',
                        grid: { display: true, color: 'rgba(200,200,200,0.2)' }, // Show grid lines
                        ticks: { display: false }
                    },
                    y: {
                        min: 0,
                        max: 200,
                        grid: { display: true, color: 'rgba(200,200,200,0.2)' }, // Show grid lines
                        ticks: { display: false }
                    }
                },
                elements: {
                    point: { radius: 0 }
                },
                animations: {
                    tension: {
                        duration: 80,
                        easing: 'linear',
                        from: 0,
                        to: 0,
                        loop: false
                    },
                    x: {
                        type: 'number',
                        easing: 'easeInOutQuart',
                        duration: 80
                    },
                    y: {
                        type: 'number',
                        easing: 'easeInOutQuart',
                        duration: 80
                    },
                    numbers: {
                        type: 'number',
                        properties: ['x', 'y'],
                        easing: 'easeOutBounce',
                        duration: 80
                    }
                }
            };

            // Add points progressively, one at a time
            for (let i = 0; i < historicalSigns.length; i++) {
                const v = historicalSigns[i];
                vitalsChart.data.labels.push(i);
                vitalsChart.data.datasets[0].data.push({ x: i, y: v.heartRate });
                vitalsChart.data.datasets[1].data.push({ x: i, y: v.oxygenSaturation });
                vitalsChart.data.datasets[2].data.push({ x: i, y: safeSplitBP(v.bloodPressure)[0] });
                vitalsChart.data.datasets[3].data.push({ x: i, y: safeSplitBP(v.bloodPressure)[1] });

                // Set tension and borderWidth for seismograph look
                vitalsChart.data.datasets.forEach(ds => {
                    ds.tension = 0;
                    ds.borderWidth = 2;
                    ds.backgroundColor = ds.backgroundColor
                        ? ds.backgroundColor.replace(/rgba\(([^,]+),([^,]+),([^,]+),[^)]+\)/, 'rgba($1,$2,$3,0.1)')
                        : 'rgba(0,0,0,0.1)';
                });

                vitalsChart.update();
                await new Promise(resolve => setTimeout(resolve, 50));
            }
        }



        
        async function showHistoricalData() {
            document.getElementById('historicalBtn').style.display = 'none';
            document.getElementById('closeHistoricalBtn').style.display = '';
            alertsEnabled = false;
            liveUpdatesEnabled = false;

            // Fetch all historical data (last 24h) from server
            const response = await fetch(`/patients/${patientId}/vitals/monitor?handler=Historical24h`);
            const historicalSigns = await response.json();

            // Prepare datasets using index as x value
            const histHeartRates = historicalSigns.map((v, i) => ({ x: i, y: v.heartRate }));
            const histOxygenSaturations = historicalSigns.map((v, i) => ({ x: i, y: v.oxygenSaturation }));
            const histSystolicBP = historicalSigns.map((v, i) => ({ x: i, y: safeSplitBP(v.bloodPressure)[0] }));
            const histDiastolicBP = historicalSigns.map((v, i) => ({ x: i, y: safeSplitBP(v.bloodPressure)[1] }));

            vitalsChart.data.labels = [];
            vitalsChart.data.datasets = [
                {
                    label: 'Heart Rate',
                    data: histHeartRates,
                    borderColor: 'rgb(255, 99, 132)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    fill: false,
                    tension: 0.4,
                    spanGaps: false
                },
                {
                    label: 'Oxygen Saturation',
                    data: histOxygenSaturations,
                    borderColor: 'rgb(54, 162, 235)',
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    fill: false,
                    tension: 0.4,
                    spanGaps: false
                },
                {
                    label: 'Systolic BP',
                    data: histSystolicBP,
                    borderColor: 'rgb(255, 206, 86)',
                    backgroundColor: 'rgba(255, 206, 86, 0.2)',
                    fill: false,
                    tension: 0.4,
                    spanGaps: false
                },
                {
                    label: 'Diastolic BP',
                    data: histDiastolicBP,
                    borderColor: 'rgb(75, 192, 192)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    fill: false,
                    tension: 0.4,
                    spanGaps: false
                }
            ];

            vitalsChart.options = {
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    title: {
                        display: true,
                        text: 'Patient Vital Signs Over Time (24h)'
                    }
                },
                interaction: { intersect: false },
                scales: {
                    x: {
                        type: 'linear',
                        title: { display: true, text: 'Index' }
                    },
                    y: { beginAtZero: true }
                },
                animations: {
                    tension: {
                        duration: 1000,
                        easing: 'linear',
                        from: 0.4,
                        to: 0.4,
                        loop: false
                    },
                    x: {
                        type: 'number',
                        easing: 'easeInOutQuart',
                        duration: 2000
                    },
                    y: {
                        type: 'number',
                        easing: 'easeInOutQuart',
                        duration: 2000
                    },
                    numbers: {
                        type: 'number',
                        properties: ['x', 'y'],
                        easing: 'easeOutBounce',
                        duration: 2000
                    }
                }
            };

            vitalsChart.update();
        }


        function restoreLiveChart() {
            document.getElementById('historicalBtn').style.display = '';
            document.getElementById('closeHistoricalBtn').style.display = 'none';

            alertsEnabled = true;
            liveUpdatesEnabled = true;

            //Restore original chart data and logic
            vitalsChart.data.labels = labels;
            vitalsChart.data.datasets = [
                {
                    label: 'Heart Rate',
                    data: heartRates,
                    borderColor: 'rgb(255, 99, 132)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    fill: false,
                    tension: 0.1
                },
                {
                    label: 'Oxygen Saturation',
                    data: oxygenSaturations,
                    borderColor: 'rgb(54, 162, 235)',
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    fill: false,
                    tension: 0.1
                },
                {
                    label: 'Systolic BP',
                    data: systolicBP,
                    borderColor: 'rgb(255, 206, 86)',
                    backgroundColor: 'rgba(255, 206, 86, 0.2)',
                    fill: false,
                    tension: 0.1
                },
                {
                    label: 'Diastolic BP',
                    data: diastolicBP,
                    borderColor: 'rgb(75, 192, 192)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    fill: false,
                    tension: 0.1
                }
            ];
                vitalsChart.options = {
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: 'Current Patient Vital Signs' }
                },
                tooltip: {
                    usePointStyle: true,
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            };
            vitalsChart.update();
        }



    </script>
}