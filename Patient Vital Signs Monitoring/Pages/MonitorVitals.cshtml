@page "/patients/{id}/vitals/monitor"
@model MonitorVitalsModel
@{
    ViewData["Title"] = "Monitor";
}

@* @if (Model.signs.Any(sign => /* check for critical values */)) {
    <div class="alert alert-danger">
        <i class="bi bi-exclamation-triangle-fill"></i>
        Critical vital sign detected!
    </div>
} *@

<div class="card narrow-card mt-4 mx-auto shadow-sm">
    <div class="card-header bg-gradient bg-primary text-white rounded-top-4">
        <div class="d-flex align-items-center justify-content-between">
            <h4 class="mb-0 text-center flex-grow-1">
                <i class="bi bi-graph-up-arrow me-2"></i>
                Monitoring Patient
                <span class="badge bg-light text-dark ms-2">ID: @Model.Id</span>
            </h4>
            <button type="button"
                    class="btn btn-outline-light ms-2"
                    id="patientInfoBtn"
                    data-bs-toggle="popover"
                    data-bs-html="true"
                    data-bs-placement="left"
                    title="Patient Info"
                    data-bs-content="
                        <strong>Name:</strong> @Model.Patient?.Name <br/>
                        <strong>Age:</strong> @Model.Patient?.Age <br/>
                        <strong>Room No:</strong> @Model.Patient?.RoomNumber <br/>
                        <strong>ID:</strong> @Model.Patient?.PatientId
                    ">
                <i class="bi bi-person-badge"></i>
            </button>
            <button class="btn btn-outline-light ms-2" onclick="downloadChart()">
                <i class="bi bi-download"></i>
            </button>
        </div>
    </div>
    <div class="card-body">
        <div class="mb-4" style="height: calc(60vh); max-width: 100%;">
            <canvas id="vitalsChart" style="width:100%; height:100%;"></canvas>
        </div>
        <div class="alert alert-info text-center mt-3">
            <i class="bi bi-info-circle me-2"></i>
            The chart above displays the patient's vital signs over time. Use the navigation menu to view details or run simulations.
        </div>
    </div>
</div>




@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>

    <script>
        // Serialize the vital signs data from the model
        const vitalSigns = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.signs));

        // Extract labels and datasets using model properties
        const labels = vitalSigns.map((v, i) => `Reading ${i + 1}`);
        const heartRates = vitalSigns.map(v => v.HeartRate);
        const oxygenSaturations = vitalSigns.map(v => v.OxygenSaturation);
        const systolicBP = vitalSigns.map(v => parseInt(v.BloodPressure.split('/')[0]));
        const diastolicBP = vitalSigns.map(v => parseInt(v.BloodPressure.split('/')[1]));
        

        // Chart.js configuration
        const ctx = document.getElementById('vitalsChart').getContext('2d');
        const vitalsChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Heart Rate',
                        data: heartRates,
                        borderColor: 'rgb(255, 99, 132)',
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        fill: false,
                        tension: 0.1
                    },
                    {
                        label: 'Oxygen Saturation',
                        data: oxygenSaturations,
                        borderColor: 'rgb(54, 162, 235)',
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        fill: false,
                        tension: 0.1
                    },
                    {
                        label: 'Systolic BP',
                        data: systolicBP,
                        borderColor: 'rgb(255, 206, 86)',
                        backgroundColor: 'rgba(255, 206, 86, 0.2)',
                        fill: false,
                        tension: 0.1
                    },
                    {
                        label: 'Diastolic BP',
                        data: diastolicBP,
                        borderColor: 'rgb(75, 192, 192)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        fill: false,
                        tension: 0.1
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: 'Patient Vital Signs Over Time' }
                },
                tooltip: {
                        usePointStyle: true,
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        document.addEventListener('DOMContentLoaded', function () {
            var popoverTrigger = document.getElementById('patientInfoBtn');
            if (popoverTrigger) {
                new bootstrap.Popover(popoverTrigger);
            }
        });

        const patientId = '@Model.Id';

        function downloadChart() {
            var link = document.createElement('a');
            link.href = vitalsChart.toBase64Image();
            link.download = `vitals_chart_${patientId}.png`;
            link.click();
        }


        function broadcastVitalSign() {
            fetch(`/patients/${patientId}/vitals/monitor?handler=BroadcastVitalSign`, {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                console.log("Vital sign broadcasted:", data);
            });
        }


        document.addEventListener('DOMContentLoaded', function () {
            setInterval(broadcastVitalSign, 10000);
        });


        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/vitalsHub")
            .withAutomaticReconnect()
            .build();

        connection.on("ReceiveVitalSign", function (newSign) {
            vitalsChart.data.labels.push(`Reading ${vitalsChart.data.labels.length + 1}`);
            vitalsChart.data.datasets[0].data.push(newSign.heartRate);
            vitalsChart.data.datasets[1].data.push(newSign.oxygenSaturation);
            const [systolic, diastolic] = newSign.bloodPressure.split('/').map(Number);
            vitalsChart.data.datasets[2].data.push(systolic);
            vitalsChart.data.datasets[3].data.push(diastolic);
            vitalsChart.update();
        });

        connection.onclose(() => console.log("SignalR connection closed"));
        connection.onreconnecting(() => console.log("SignalR reconnecting..."));
        connection.onreconnected(() => console.log("SignalR reconnected"));
        
        connection.start()
                    .then(() => console.log("SignalR connected"))
                    .catch(err => console.error("SignalR connection error:", err));
    </script>

    
}